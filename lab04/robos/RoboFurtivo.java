package robos;

import ambiente.Ambiente;

// Classe RoboFurtivo (herda de RoboAereo)
public class RoboFurtivo extends RoboAereo {
    private boolean modoFurtivo; // true se est치 invis칤vel

    // Construtor
    public RoboFurtivo(String id, String direcao, int x, int y, Ambiente ambiente, int altitudeMaxima, TipoMaterial material) {
        super(id, direcao, x, y, ambiente, altitudeMaxima, material);
        this.modoFurtivo = false; // come칞a desativado
    }

    // 游댠 Alterna o modo furtivo
    public void alternarModoFurtivo() {
        modoFurtivo = !modoFurtivo;
        if (modoFurtivo) {
            System.out.println(getId() + " ativou o modo furtivo e agora est치 invis칤vel!");
        } else {
            System.out.println(getId() + " desativou o modo furtivo e agora est치 vis칤vel.");
        }
    }

    // 游댠 Verifica se est치 furtivo
    public boolean isModoFurtivo() {
        return modoFurtivo;
    }

    // 游댠 Implementa칞칚o obrigat칩ria do lab
    @Override
    public void executarTarefa() {
        // Simples: alterna o modo furtivo como sua tarefa
        alternarModoFurtivo();
        System.out.println(getId() + " executou sua tarefa de alternar modo furtivo.");
    }

    @Override
    public String getDescricao() {
        return "RoboFurtivo: " + getId() + ", Dire칞칚o: " + direcao + ", Posi칞칚o: (" + xPosicao + ", " + yPosicao + ", " + getZ() +
                "), Modo Furtivo: " + (modoFurtivo ? "Ativado" : "Desativado");
    }

    @Override
    public char getRepresentacao() {
        return 'F'; // 'F' de Furtivo
    }
}
